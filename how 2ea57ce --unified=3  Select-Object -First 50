[33mcommit 2ea57cee1ae34a64ab7cd8ef945dcf5ba82dcb16[m
Author: laowangbot <zwjmht@gmail.com>
Date:   Sun Aug 17 06:08:56 2025 +0800

    Update csmain.py

[1mdiff --git a/csmain.py b/csmain.py[m
[1mindex 620e6b5..292214b 100644[m
[1m--- a/csmain.py[m
[1m+++ b/csmain.py[m
[36m@@ -459,3 +459,3 @@[m [mUSER_CREDENTIALS = {[m
 [m
[31m-app = Client("ygbybot_session", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)[m
[32m+[m[32mapp = Client(f"{config['bot_id']}_session", api_id=config['api_id'], api_hash=config['api_hash'], bot_token=config['bot_token'])[m
 [m
[36m@@ -480,2 +480,3 @@[m [mdef save_login_data():[m
     try:[m
[32m+[m[32m        login_file = f"user_login_{config['bot_id']}.json"[m
         login_data = {[m
[36m@@ -484,7 +485,7 @@[m [mdef save_login_data():[m
         }[m
[31m-        with open("user_login.json", "w", encoding="utf-8") as f:[m
[32m+[m[32m        with open(login_file, "w", encoding="utf-8") as f:[m
             json.dump(login_data, f, ensure_ascii=False, indent=4)[m
[31m-        logging.info("登录数据已保存")[m
[32m+[m[32m        logging.info(f"[{config['bot_id']}] 登录数据已保存到 {login_file}")[m
     except Exception as e:[m
[31m-        logging.error(f"保存登录数据失败: {e}")[m
[32m+[m[32m        logging.error(f"[{config['bot_id']}] 保存登录数据失败: {e}")[m
 [m
[36m@@ -494,4 +495,5 @@[m [mdef load_login_data():[m
     try:[m
[31m-        if os.path.exists("user_login.json"):[m
[31m-            with open("user_login.json", "r", encoding="utf-8") as f:[m
[32m+[m[32m        login_file = f"user_login_{config['bot_id']}.json"[m
[32m+[m[32m        if os.path.exists(login_file):[m
[32m+[m[32m            with open(login_file, "r", encoding="utf-8") as f:[m
                 login_data = json.load(f)[m
[36m@@ -499,5 +501,11 @@[m [mdef load_login_data():[m
                 login_attempts = login_data.get("login_attempts", {})[m
[31m-            logging.info("登录数据已加载")[m
[32m+[m[32m            logging.info(f"[{config['bot_id']}] 登录数据已从 {login_file} 加载")[m
[32m+[m[32m        else:[m
[32m+[m[32m            logging.info(f"[{config['bot_id']}] 登录文件 {login_file} 不存在，将创建新登录数据")[m
[32m+[m[32m            logged_in_users = {}[m
[32m+[m[32m            login_attempts = {}[m
     except Exception as e:[m
[31m-        logging.error(f"加载登录数据失败: {e}")[m
[32m+[m[32m        logging.error(f"[{config['bot_id']}] 加载登录数据失败: {e}")[m
[32m+[m[32m        logged_in_users = {}[m
[32m+[m[32m        login_attempts = {}[m
 [m
[36m@@ -1173,2 +1181,32 @@[m [masync def cooperative_sleep(task_obj: dict, seconds: int):[m
 [m
[32m+[m[32m# ==================== 多机器人配置管理 ====================[m
[32m+[m[32mdef get_bot_config():[m
[32m+[m[32m    """获取机器人配置"""[m
[32m+[m[32m    # 从环境变量获取机器人标识[m
[32m+[m[32m    bot_id = os.environ.get('BOT_ID', 'main')[m
[32m+[m[32m    bot_name = os.environ.get('BOT_NAME', f'老湿姬{bot_id}')[m
[32m+[m[32m    bot_version = os.environ.get('BOT_VERSION', '多机器人版本')[m
[32m+[m[41m    [m
[32m+[m[32m    # 从环境变量获取Telegram配置[m
[32m+[m[32m    api_id = os.environ.get('API_ID')[m
[32m+[m[32m    api_hash = os.environ.get('API_HASH')[m
[32m+[m[32m    bot_token = os.environ.get('BOT_TOKEN')[m
[32m+[m[41m    [m
[32m+[m[32m    if not all([api_id, api_hash, bot_token]):[m
[32m+[m[32m        raise ValueError("缺少必需的环境变量: API_ID, API_HASH, BOT_TOKEN")[m
[32m+[m[41m    [m
[32m+[m[32m    return {[m
[32m+[m[32m        'bot_id': bot_id,[m
[32m+[m[32m        'bot_name': bot_name,[m
[32m+[m[32m        'bot_version': bot_version,[m
[32m+[m[32m        'api_id': api_id,[m
[32m+[m[32m        'api_hash': api_hash,[m
[32m+[m[32m        'bot_token': bot_token[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m# 获取配置[m
[32m+[m[32mconfig = get_bot_config()[m
[32m+[m[32mprint(f"🤖 启动机器人: {config['bot_name']} - {config['bot_version']}")[m
[32m+[m[32mprint(f"🔑 机器人ID: {config['bot_id']}")[m
[32m+[m
 # ==================== 持久化函数 ====================[m
[36m@@ -1176,5 +1214,6 @@[m [mdef save_configs():[m
     """将用户配置保存到文件"""[m
[31m-    with open("user_configs.json", "w", encoding='utf-8') as f:[m
[32m+[m[32m    config_file = f"user_configs_{config['bot_id']}.json"[m
[32m+[m[32m    with open(config_file, "w", encoding='utf-8') as f:[m
         json.dump(user_configs, f, ensure_ascii=False, indent=4)[m
[31m-    logging.info("用户配置已保存。")[m
[32m+[m[32m    logging.info(f"[{config['bot_id']}] 用户配置已保存到 {config_file}。")[m
 [m
[36m@@ -1183,6 +1222,10 @@[m [mdef load_configs():[m
     global user_configs[m
[31m-    if os.path.exists("user_configs.json"):[m
[31m-        with open("user_configs.json", "r", encoding="utf-8") as f:[m
[32m+[m[32m    config_file = f"user_configs_{config['bot_id']}.json"[m
[32m+[m[32m    if os.path.exists(config_file):[m
[32m+[m[32m        with open(config_file, "r", encoding="utf-8") as f:[m
             user_configs = json.load(f)[m
[31m-        logging.info("用户配置已载入。")[m
[32m+[m[32m        logging.info(f"[{config['bot_id']}] 用户配置已从 {config_file} 载入。")[m
[32m+[m[32m    else:[m
[32m+[m[32m        logging.info(f"[{config['bot_id']}] 配置文件 {config_file} 不存在，将创建新配置。")[m
[32m+[m[32m        user_configs = {}[m
 [m
[36m@@ -1191,7 +1234,8 @@[m [mdef save_user_states():[m
     try:[m
[31m-        with open("user_states.json", "w", encoding='utf-8') as f:[m
[32m+[m[32m        config_file = f"user_states_{config['bot_id']}.json"[m
[32m+[m[32m        with open(config_file, "w", encoding='utf-8') as f:[m
             json.dump(user_states, f, ensure_ascii=False, indent=4)[m
[31m-        logging.info("用户状态已保存。")[m
[32m+[m[32m        logging.info(f"[{config['bot_id']}] 用户状态已保存到 {config_file}。")[m
     except Exception as e:[m
[31m-        logging.error(f"保存用户状态失败: {e}")[m
[32m+[m[32m        logging.error(f"[{config['bot_id']}] 保存用户状态失败: {e}")[m
 [m
[36m@@ -1201,11 +1245,12 @@[m [mdef load_user_states():[m
     try:[m
[31m-        if os.path.exists("user_states.json"):[m
[31m-            with open("user_states.json", "r", encoding="utf-8") as f:[m
[32m+[m[32m        config_file = f"user_states_{config['bot_id']}.json"[m
[32m+[m[32m        if os.path.exists(config_file):[m
[32m+[m[32m            with open(config_file, "r", encoding="utf-8") as f:[m
                 user_states = json.load(f)[m
[31m-            logging.info("用户状态已载入。")[m
[32m+[m[32m            logging.info(f"[{config['bot_id']}] 用户状态已从 {config_file} 载入。")[m
         else:[m
             user_states = {}[m
[31m-            logging.info("用户状态文件不存在，使用空状态。")[m
[32m+[m[32m            logging.info(f"[{config['bot_id']}] 用户状态文件 {config_file} 不存在，使用空状态。")[m
     except Exception as e:[m
[31m-        logging.error(f"载入用户状态失败: {e}")[m
[32m+[m[32m        logging.error(f"[{config['bot_id']}] 载入用户状态失败: {e}")[m
         user_states = {}[m
[36m@@ -1214,5 +1259,6 @@[m [mdef save_history():[m
     """将历史记录保存到文件"""[m
[31m-    with open("user_history.json", "w", encoding="utf-8") as f:[m
[32m+[m[32m    config_file = f"user_history_{config['bot_id']}.json"[m
[32m+[m[32m    with open(config_file, "w", encoding="utf-8") as f:[m
         json.dump(user_history, f, ensure_ascii=False, indent=4)[m
[31m-    logging.info("历史记录已保存。")[m
[32m+[m[32m    logging.info(f"[{config['bot_id']}] 历史记录已保存到 {config_file}。")[m
 [m
[36m@@ -1221,4 +1267,5 @@[m [mdef load_history():[m
     global user_history[m
[31m-    if os.path.exists("user_history.json"):[m
[31m-        with open("user_history.json", "r", encoding="utf-8") as f:[m
[32m+[m[32m    config_file = f"user_history_{config['bot_id']}.json"[m
[32m+[m[32m    if os.path.exists(config_file):[m
[32m+[m[32m        with open(config_file, "r", encoding="utf-8") as f:[m
             user_history = json.load(f)[m
[36m@@ -6238,2 +6285,68 @@[m [mdef validate_user_config(config):[m
 [m
[32m+[m[32m# ==================== 端口绑定和心跳机制 ====================[m
[32m+[m[32mdef start_port_server():[m
[32m+[m[32m    """启动端口服务器，用于Render Web Service"""[m
[32m+[m[32m    try:[m
[32m+[m[32m        import socket[m
[32m+[m[32m        import http.server[m
[32m+[m[32m        import socketserver[m
[32m+[m[41m        [m
[32m+[m[32m        class SimpleHandler(http.server.BaseHTTPRequestHandler):[m
[32m+[m[32m            def do_GET(self):[m
[32m+[m[32m                self.send_response(200)[m
[32m+[m[32m                self.send_header('Content-type', 'text/html')[m
[32m+[m[32m                self.end_headers()[m
[32m+[m[32m                response = """[m
[32m+[m[32m                <html>[m
[32m+[m[32m                <head><title>搬运机器人服务</title></head>[m
[32m+[m[32m                <body>[m
[32m+[m[32m                <h1>🤖 {bot_name} - {bot_version}</h1>[m
[32m+[m[32m                <p>机器人ID: {bot_id}</p>[m
[32m+[m[32m                <p>状态：正常运行中</p>[m
[32m+[m[32m                <p>时间：{current_time}</p>[m
[32m+[m[32m                </body>[m
[32m+[m[32m                </html>[m
[32m+[m[32m                """.format([m
[32m+[m[32m                    bot_name=config['bot_name'],[m
[32m+[m[32m                    bot_version=config['bot_version'],[m
[32m+[m[32m                    bot_id=config['bot_id'],[m
[32m+[m[32m                    current_time=datetime.now().strftime("%Y-%m-%d %H:%M:%S")[m
[32m+[m[32m                )[m
[32m+[m[32m                self.wfile.write(response.encode())[m
[32m+[m[41m            [m
[32m+[m[32m            def log_message(self, format, *args):[m
[32m+[m[32m                # 禁用HTTP访问日志[m
[32m+[m[32m                pass[m
[32m+[m[41m        [m
[32m+[m[32m        # 绑定到Render分配的端口[m
[32m+[m[32m        port = int(os.environ.get('PORT', 8080))[m
[32m+[m[41m        [m
[32m+[m[32m        with socketserver.TCPServer(("", port), SimpleHandler) as httpd:[m
[32m+[m[32m            print(f"🌐 [{config['bot_id']}] 端口服务器启动成功，监听端口 {port}")[m
[32m+[m[32m            httpd.serve_forever()[m
[32m+[m[41m    [m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        print(f"⚠️ [{config['bot_id']}] 端口服务器启动失败: {e}")[m
[32m+[m
[32m+[m[32mdef start_heartbeat():[m
[32m+[m[32m    """启动心跳机制，防止Render 15分钟自动停止"""[m
[32m+[m[32m    import requests[m
[32m+[m[32m    import time[m
[32m+[m[41m    [m
[32m+[m[32m    while True:[m
[32m+[m[32m        try:[m
[32m+[m[32m            # 获取当前服务URL[m
[32m+[m[32m            service_url = os.environ.get('RENDER_EXTERNAL_URL')[m
[32m+[m[32m            if service_url:[m
[32m+[m[32m                # 向自己的服务发送请求，保持活跃[m
[32m+[m[32m                response = requests.get(f"{service_url}/", timeout=10)[m
[32m+[m[32m                print(f"💓 [{config['bot_id']}] 心跳请求成功: {response.status_code}")[m
[32m+[m[32m            else:[m
[32m+[m[32m                print(f"💓 [{config['bot_id']}] 心跳机制运行中（无外部URL）")[m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            print(f"💓 [{config['bot_id']}] 心跳请求失败: {e}")[m
[32m+[m[41m        [m
[32m+[m[32m        # 每10分钟发送一次心跳[m
[32m+[m[32m        time.sleep(600)[m
[32m+[m
 # ==================== 启动机器人 ====================[m
[36m@@ -6245,2 +6358,12 @@[m [mif __name__ == "__main__":[m
     [m
[32m+[m[32m    # 在后台启动端口服务器[m
[32m+[m[32m    import threading[m
[32m+[m[32m    port_thread = threading.Thread(target=start_port_server, daemon=True)[m
[32m+[m[32m    port_thread.start()[m
[32m+[m[41m    [m
[32m+[m[32m    # 启动心跳线程[m
[32m+[m[32m    heartbeat_thread = threading.Thread(target=start_heartbeat, daemon=True)[m
[32m+[m[32m    heartbeat_thread.start()[m
[32m+[m[32m    print(f"💓 [{config['bot_id']}] 心跳机制已启动，每10分钟发送一次请求")[m
[32m+[m[41m    [m
     load_configs()[m
[36m@@ -6280,3 +6403,4 @@[m [mif __name__ == "__main__":[m
     print("=" * 60)[m
[31m-    print("✅ 启动完成！机器人状态:")[m
[32m+[m[32m    print(f"✅ 启动完成！{config['bot_name']} 状态:")[m
[32m+[m[32m    print(f"   🔑 机器人ID: {config['bot_id']}")[m
     print(f"   📡 新搬运引擎: {'✅ 可用' if NEW_ENGINE_AVAILABLE else '❌ 不可用'}")[m
